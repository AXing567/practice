/*
题目描述
某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是1米。
我们可以把马路看成一个数轴，马路的一端在数轴0的位置，另一端在L的位置；
数轴上的每个整数点，即0，1，2，……，L，都种有一棵树。
由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。
已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。
现在要把这些区域中的树（包括区域端点处的两棵树）移走。给出某一段区间，你的任务是计算区间内马路上还有多少棵树。
输入格式
第一行有三个整数L（1 <= L <= 1000000）、 M（1 <= M <= 10000）和N（1 <= N <= 10000），L代表马路的长度，M代表区域的数目，N代表询问区间数量，L、M、N之间用一个空格隔开。接下来的M行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标，这段区域的树都将被挖走。接下来的N行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点和终止点的坐标，求这段区间中树的数量。
输出格式
输出包括N行，每行只包含一个整数，表示这段马路上剩余的树的数目。
样例输入
500 3 1
150 300
100 200
470 471
0 500
样例输出
298
提示
1 <= L <= 1000000
1 <= M <= 10000
1 <= N <= 10000
保证起点坐标<终点坐标
来源
硕硕
*/

#include <iostream>
using namespace std;

int a[10000010];

int main()
{

    int l, m, n;
    int left, right;
    int ans = 0;
    cin >> l >> m >> n;
    l++;//整体向右偏移1，为了避免数组越界，因为后面求解会用到left-1，
    for (int i = 1; i <= m; i++)
    {
        cin >> left >> right;
        left++;//因为树的位置从0到l偏移到了1到l+1，所以每段的左端点和右端点都要同l一样向右偏移1
        right++;
        a[left]--;
        a[right + 1]++;
    }
    for (int i = 1; i <= l ; i++) 
    {
        a[i] = a[i - 1] + a[i];//利用前缀和，用负数标记出此位置是否被砍掉
    }
    for (int i = 1; i <= l ; i++)// 如果此位置没被砍掉（a[i]==0)，那这个位置就置1了，代表有树。反之置0代表没有树
    {                           //  然后我们可以得到一个类似于值为1110000111111100000的数组，然后就可以通过前缀和统计树的数量了                     
        if (a[i] == 0)//0代表此位置有树
            a[i] = 1;//置1，便于后续统计树的数量的前缀和
        else
            a[i] = 0;//置0，便于后续统计树的数量的前缀和
        a[i] = a[i - 1] + a[i];//统计树的数量的前缀和
    }//此时a数组中[1,l+1]的值会是类似于这样的1 2 3 4 5 6 6 6 6 6 6 6 6 6 7 8 9 10 11 12 12 12 12 ......

    while (n--)
    {
        cin >> left >> right;
        left++;
        right++;    
        cout << a[right] - a[left - 1]<<endl;//例如25到50区间，求解公式为：sum[50]-sum[25-1]
    }
    return 0;
}